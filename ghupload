#!/usr/bin/env py
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8 :
# vim: set syntax=python :
# vim: set foldmethod=marker foldlevel=0 :
# ghupload.py
import argparse
import base64
import json
import os
import re
import ssl
import subprocess
import urllib.request


def _get_remote_repo() -> str:
    try:
        result = subprocess.run(["git", "remote", "-v"], capture_output=True, text=True, check=True)
        remotes = result.stdout.strip().split("\n")

        for remote in remotes:
            match = re.search(r"(?:https://|git@)github\.com[:/](.+?)(?:\.git)?\s", remote)
            if match:
                return match.group(1)  # Returns in the format "owner/repo"
    except subprocess.CalledProcessError as e:
        print("Failed to retrieve `git remote -v`")
        raise e

    raise ValueError("GitHub remote repository not found")


def _get_endpoint(file_path: str) -> str:
    remote_repo = _get_remote_repo()
    return f"https://api.github.com/repos/{remote_repo}/contents/{file_path}"


def _get_headers() -> dict[str, str]:
    token = os.environ["GITHUB_UPLOAD_API_TOKEN"]
    return {
        "Accept": "application/vnd.github+json",
        "Authorization": f"bearer {token}",
        "X-GitHub-Api-Version": "2022-11-28",
    }


def _get_comitter() -> dict:
    user = subprocess.run(["git", "config", "user.name"], capture_output=True, text=True, check=True).stdout.strip()
    email = subprocess.run(["git", "config", "user.email"], capture_output=True, text=True, check=True).stdout.strip()
    if user == "" or email == "":
        raise ValueError("Git user name and email are not set")

    return {
        "name": user,
        "email": email,
    }


def _get_security_context():
    ca_bundle = os.environ.get("SSL_CERT_FILE")
    print(f"{ca_bundle=}")
    if ca_bundle:
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
        context.load_verify_locations(ca_bundle)
        return context
    else:
        return None


def _get_file_info(file_path: str, branch: str | None) -> dict | None:
    url = _get_endpoint(file_path)
    if branch:
        url += f"?ref={branch}"

    headers = _get_headers()
    req = urllib.request.Request(url, headers=headers)
    context = _get_security_context()
    try:
        with urllib.request.urlopen(req, context=context) as res:
            response_json = json.load(res)
            print(f"{response_json=}")
            return response_json
    except urllib.error.HTTPError as e:
        if e.code == 404:
            return None  # If the file does not exist, create a new one
        else:
            # print(f"HTTPError: {e.code}, body: {e.read().decode()}")
            raise e


def _upload_file_content(file_path: str, branch: str | None, message: str):
    file_info = _get_file_info(file_path, branch)

    with open(file_path, "rb") as file:
        # Get base64 encoded content for binary or text files
        content = file.read()
        base64_content = base64.b64encode(content).decode("utf-8")

    url = _get_endpoint(file_path)

    headers = _get_headers()
    headers["Content-Type"] = "application/json"

    request_body = {
        "commiter": _get_comitter(),
        "message": message,
        "content": base64_content,
    }

    if file_info:
        request_body["sha"] = file_info["sha"]

    if branch:
        request_body["branch"] = branch 

    print(f"{request_body=}")
    req = urllib.request.Request(
        url, json.dumps(request_body).encode(), headers, method="PUT"
    )
    context = _get_security_context()
    with urllib.request.urlopen(req, context=context) as res:
        response_body = res.read()
        print(f"{res.status=}")
        print(f"{res.reason=}")
        print(f"{res.headers=}")
        print(f"{response_body=}")


if __name__ == "__main__":
    argparser = argparse.ArgumentParser()
    argparser.add_argument("files", type=str, nargs="*")
    argparser.add_argument("--message", "-m", type=str, default="modified")
    argparser.add_argument("--branch", "-b", type=str)

    args = argparser.parse_args()

    if len(args.files) == 0:
        print("No files specified for upload")
        exit(1)

    if os.environ.get("GITHUB_UPLOAD_API_TOKEN") is None:
        print("Environment variable GITHUB_UPLOAD_API_TOKEN is not set")
        exit(1)

    for file in args.files:
        _upload_file_content(file, args.branch, args.message)
